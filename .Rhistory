vertex.label.cex=1+betweenness(peaky_network, weights = NA)/2000,
vertex.color = c3$best$best1$clu,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Three block partition")
plot.igraph(peaky_network,
edge.color="gray",
edge.curved=.1,
edge.width= 1+E(peaky_network)$weight/15,
vertex.size = degree(peaky_network)/5,
vertex.frame.color="#555555",
vertex.label = V(peaky_network)$name_edited,
vertex.label.color="black",
vertex.label.cex=1+betweenness(peaky_network, weights = NA)/2000,
vertex.color = c4$best$best1$clu,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Four block partition")
plot.igraph(peaky_network,
edge.color="gray",
edge.curved=.1,
edge.width= 1+E(peaky_network)$weight/15,
vertex.size = degree(peaky_network)/5,
vertex.frame.color="#555555",
vertex.label = V(peaky_network)$name_edited,
vertex.label.color="black",
vertex.label.cex=1+betweenness(peaky_network, weights = NA)/2000,
vertex.color = c5$best$best1$clu,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Five block partition")
plot.igraph(peaky_network,
edge.color="gray",
edge.curved=.1,
edge.width= 1+E(peaky_network)$weight/15,
vertex.size = degree(peaky_network)/3,
vertex.frame.color="#555555",
vertex.label = V(peaky_network)$name_edited,
vertex.label.color="black",
vertex.label.cex=1+betweenness(peaky_network, weights = NA)/1500,
vertex.color = c3$best$best1$clu,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Three block partition")
plot.igraph(peaky_network,
edge.color="gray",
edge.curved=.1,
edge.width= 1+E(peaky_network)$weight/15,
vertex.size = degree(peaky_network)/3,
vertex.frame.color="#555555",
vertex.label = V(peaky_network)$name_edited,
vertex.label.color="black",
vertex.label.cex=1+betweenness(peaky_network, weights = NA)/1500,
vertex.color = c4$best$best1$clu,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Four block partition")
plot.igraph(peaky_network,
edge.color="gray",
edge.curved=.1,
edge.width= 1+E(peaky_network)$weight/15,
vertex.size = degree(peaky_network)/3,
vertex.frame.color="#555555",
vertex.label = V(peaky_network)$name_edited,
vertex.label.color="black",
vertex.label.cex=1+betweenness(peaky_network, weights = NA)/1500,
vertex.color = c5$best$best1$clu,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Five block partition")
transitivity(peaky_network, type="global")
cbind(V(peaky_network)$name, round(transitivity(peaky_network, type = "local"), digits = 2))
transitivity_peaky <- transitivity(peaky_network, type="local")
betweenness_peaky <- betweenness(peaky_network, weights = NA, normalized = TRUE)
colour_c5 <- factor(c5$best$best1$clu)
df <- data.frame(LocalClustering = transitivity_peaky,
Betweenness = betweenness_peaky,
Colour = colour_c5) |>
mutate(Betweenness_logged = if_else(Betweenness == 0, NA, log(Betweenness)))
cor_value <- round(cor(df$LocalClustering, df$Betweenness_logged, use = "complete.obs"), 2)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 5, colour = "red") +
geom_text(aes(label = str_to_title(V(peaky_network)$name)), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
transitivity_peaky <- transitivity(peaky_network, type="local")
betweenness_peaky <- betweenness(peaky_network, weights = NA, normalized = TRUE)
colour_c5 <- factor(c5$best$best1$clu)
df <- data.frame(LocalClustering = transitivity_peaky,
Betweenness = betweenness_peaky,
Colour = colour_c5) |>
mutate(Betweenness_logged = if_else(Betweenness == 0, NA, log(Betweenness)))
cor_value <- round(cor(df$LocalClustering, df$Betweenness_logged, use = "complete.obs"), 2)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 5, colour = "red") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
transitivity_peaky <- transitivity(peaky_network, type="local")
betweenness_peaky <- betweenness(peaky_network, weights = NA, normalized = TRUE)
colour_c5 <- factor(c5$best$best1$clu)
df <- data.frame(LocalClustering = transitivity_peaky,
Betweenness = betweenness_peaky,
Colour = colour_c5) |>
mutate(Betweenness_logged = if_else(Betweenness == 0, NA, log(Betweenness)))
cor_value <- round(cor(df$LocalClustering, df$Betweenness_logged, use = "complete.obs"), 2)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 7, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
margin(2, 2, 2, 2)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 7, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
plot.margin = margin(2, 2, 2, 2)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
plot.margin = margin(2, 5, 2, 2)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
plot.margin = margin(2, 0, 2, 2)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
plot.margin = margin(2, 2, 2, 0)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
?theme
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
aspect.ratio = 0.5
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
aspect.ratio = 2
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
aspect.ratio = 0.3
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 1, vjust = 2) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 2, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = -1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = 0, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text(aes(label = V(peaky_network)$name_edited), size = 4, hjust = -0.1, vjust = 1) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
library(ggrepel)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 5) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
ggrepel::geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 5) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
ggrepel::geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 4) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank()
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
ggrepel::geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 4) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
axis.title = element_text(size = 8)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
ggrepel::geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 4) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
axis.title = element_text(size = 10)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 8, colour = "#A9A9A9") +
ggrepel::geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 4) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
axis.title = element_text(size = 12)
)
ggplot(df, aes(x = LocalClustering, y = Betweenness_logged)) +
geom_point(aes(colour = Colour), size = 3) +
geom_smooth(method = "lm", color = "blue", size = 0.5) +
labs(x = "Local Clustering", y = "Betweenness (logged)") +
annotate("text", x=0.6, y=-0.7, label = paste("Correlation:", cor_value), size = 6, colour = "#A9A9A9") +
ggrepel::geom_text_repel(aes(label = V(peaky_network)$name_edited), size = 4) +
theme_minimal()+
theme(
legend.position = "none",
panel.grid = element_blank(),
axis.title = element_text(size = 12)
)
View(cooccurrence_matrix)
library(igraph)
library(tidyverse)
library(ggrepel)
library(blockmodeling)
peaky_df <- readRDS("cooccurrence_df.rds")
peaky_adj_mat <- as.matrix(peaky_df)
# no self-links
diag(peaky_adj_mat) <- 0
peaky_network <- graph_from_adjacency_matrix(peaky_adj_mat,
mode = "undirected",
weighted = TRUE)
peaky_network <- set_vertex_attr(
peaky_network,
"name_edited",
value = str_to_title(str_replace_all(V(peaky_network)$name, "_", " "))
)
peaky_network
set.seed(100)
layout1 <- layout_with_fr(peaky_network)
layout2 <- layout_with_kk(peaky_network)
layout3 <- layout_with_dh(peaky_network)
layout4 <- layout_with_lgl(peaky_network)
plot.igraph(peaky_network,
edge.color="gray",
edge.curved=.1,
edge.width= 1+E(peaky_network)$weight/15,
vertex.size = degree(peaky_network)/3,
vertex.frame.color="#555555",
vertex.label = V(peaky_network)$name_edited,
vertex.color = "#FBD87F",
vertex.label.color="black",
vertex.label.cex=1+betweenness(peaky_network, weights = NA)/1000,
margin=c(0,0,0,0) ,
asp=0,
layout=layout4,
main = "Network of Peaky Blinders (Seasons 1-6)")
paste0("Density: ", edge_density(peaky_network))
paste0("Diameter: ", diameter(peaky_network, weights = NA))
geodesics <- shortest.paths(peaky_network, weights = NA)
centrality_df <- tibble(
names(V(peaky_network)),
degree(peaky_network),
strength(peaky_network),
closeness(peaky_network, weights = NA, normalized = TRUE),
betweenness(peaky_network, weights = NA, directed = FALSE, normalized = TRUE),
eigen_centrality(peaky_network)$vector,
eigen_centrality(peaky_network, weights = NA)$vector,
page.rank(peaky_network)$vector,
page.rank(peaky_network, weights = NA)$vector
)
names(centrality_df) <- c(
"Name",
"Degree",
"Weighted Degree",
"Closeness \n(normalised)",
"Betweenness \n(normalised)",
"Eigenvector",
"Eigenvector (unweighted)",
"Google PageRank",
"Google PageRank (unweighted)")
toselect <- c(
"thomas", "polly", "ada",
"michael", "arthur",
"grace", "finn","john",
"sabini", "curly")
order_names <- c(
"Thomas", "Polly", "Ada",
"Michael", "Arthur",
"Grace", "Finn", "John",
"Sabini", "Curly")
centrality_subset_df <- centrality_df |>
filter(Name %in% toselect) |>
arrange(match(Name, toselect)) |>
select("Name", "Degree", "Weighted Degree",
"Closeness \n(normalised)", "Betweenness \n(normalised)",
"Eigenvector", "Google PageRank") |>
pivot_longer(-Name, names_to = "centrality", values_to = "value") |>
group_by(centrality) |>
arrange(desc(value)) |>
mutate(order = row_number()) |>
mutate(Name = str_to_title(str_replace_all(Name, "_", " ")),
Name = factor(Name, levels = order_names)) |>
ungroup() |>
mutate(
centrality = factor(
centrality,
levels = c("Name", "Degree", "Weighted Degree",
"Closeness \n(normalised)", "Betweenness \n(normalised)",
"Eigenvector", "Google PageRank")))
View(centrality_df)
test <- centrality_df |>
mutate(degree_rank = rank(degree)) |>
mutate(eigen_rank = rank('Eigenvector \(unweighted)')
colnames(centrality_df)
centrality_df_ranked <- centrality_df(
mutate_if(is.numeric, rank())
)
centrality_df_ranked <- centrality_df |>
mutate_if(is.numeric, rank())
centrality_df_ranked <- centrality_df |>
mutate_if(is.numeric, ~rank)
centrality_df_ranked <- centrality_df |>
mutate_if(is.numeric, ~rank)
centrality_df_ranked <- centrality_df |>
mutate(degree_rank = rank(as.numeric(Degree)))
View(centrality_df_ranked)
?rank
centrality_df_ranked <- centrality_df |>
mutate(degree_rank = rank(as.numeric(Degree)),
w_degree_rank = rank(as.numeric(`Weighted Degree`)))
centrality_df_ranked <- centrality_df |>
mutate(degree_rank = rank(as.numeric(Degree)),
w_degree_rank = rank(as.numeric(`Weighted Degree`)),
eigen_rank = rank(as.numeric(Eigenvector)),
w_eigen_rank = rank(as.numeric(`Eigenvector (unweighted)`)))
centrality_df_ranked <- centrality_df |>
mutate(degree_rank = rank(as.numeric(Degree)),
w_degree_rank = rank(as.numeric(`Weighted Degree`)),
eigen_rank = rank(as.numeric(Eigenvector)),
w_eigen_rank = rank(as.numeric(`Eigenvector (unweighted)`))) |>
# check for differences when going to degree to eigenvector
mutate(diff = eigen_ramk - degree_rank,
w_diff = w_eigen_rank - w_degree_rank)
centrality_df_ranked <- centrality_df |>
mutate(degree_rank = rank(as.numeric(Degree)),
w_degree_rank = rank(as.numeric(`Weighted Degree`)),
eigen_rank = rank(as.numeric(Eigenvector)),
w_eigen_rank = rank(as.numeric(`Eigenvector (unweighted)`))) |>
# check for differences when going to degree to eigenvector
mutate(diff = eigen_rank - degree_rank,
w_diff = w_eigen_rank - w_degree_rank)
